// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PROTOCOL_MSG.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PROTOCOL_5fMSG_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PROTOCOL_5fMSG_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PROTOCOL_5fMSG_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PROTOCOL_5fMSG_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PROTOCOL_5fMSG_2eproto;
namespace protocolmsg {
class gui2backend_msg;
class gui2backend_msgDefaultTypeInternal;
extern gui2backend_msgDefaultTypeInternal _gui2backend_msg_default_instance_;
}  // namespace protocolmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::protocolmsg::gui2backend_msg* Arena::CreateMaybeMessage<::protocolmsg::gui2backend_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocolmsg {

// ===================================================================

class gui2backend_msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocolmsg.gui2backend_msg) */ {
 public:
  inline gui2backend_msg() : gui2backend_msg(nullptr) {};
  virtual ~gui2backend_msg();

  gui2backend_msg(const gui2backend_msg& from);
  gui2backend_msg(gui2backend_msg&& from) noexcept
    : gui2backend_msg() {
    *this = ::std::move(from);
  }

  inline gui2backend_msg& operator=(const gui2backend_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline gui2backend_msg& operator=(gui2backend_msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const gui2backend_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gui2backend_msg* internal_default_instance() {
    return reinterpret_cast<const gui2backend_msg*>(
               &_gui2backend_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(gui2backend_msg& a, gui2backend_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(gui2backend_msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gui2backend_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gui2backend_msg* New() const final {
    return CreateMaybeMessage<gui2backend_msg>(nullptr);
  }

  gui2backend_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gui2backend_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gui2backend_msg& from);
  void MergeFrom(const gui2backend_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gui2backend_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocolmsg.gui2backend_msg";
  }
  protected:
  explicit gui2backend_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PROTOCOL_5fMSG_2eproto);
    return ::descriptor_table_PROTOCOL_5fMSG_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kEventFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAckFieldNumber = 4,
    kIspageswitcheventFieldNumber = 5,
  };
  // optional string value = 3 [default = ""];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int32 event = 1 [default = -1];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::PROTOBUF_NAMESPACE_ID::int32 event() const;
  void set_event(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event() const;
  void _internal_set_event(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 type = 2 [default = -1];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ack = 4 [default = -1];
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::int32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ispageswitchevent = 5 [default = -1];
  bool has_ispageswitchevent() const;
  private:
  bool _internal_has_ispageswitchevent() const;
  public:
  void clear_ispageswitchevent();
  ::PROTOBUF_NAMESPACE_ID::int32 ispageswitchevent() const;
  void set_ispageswitchevent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ispageswitchevent() const;
  void _internal_set_ispageswitchevent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocolmsg.gui2backend_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 ack_;
  ::PROTOBUF_NAMESPACE_ID::int32 ispageswitchevent_;
  friend struct ::TableStruct_PROTOCOL_5fMSG_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// gui2backend_msg

// optional int32 event = 1 [default = -1];
inline bool gui2backend_msg::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool gui2backend_msg::has_event() const {
  return _internal_has_event();
}
inline void gui2backend_msg::clear_event() {
  event_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::_internal_event() const {
  return event_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::event() const {
  // @@protoc_insertion_point(field_get:protocolmsg.gui2backend_msg.event)
  return _internal_event();
}
inline void gui2backend_msg::_internal_set_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_ = value;
}
inline void gui2backend_msg::set_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:protocolmsg.gui2backend_msg.event)
}

// optional int32 type = 2 [default = -1];
inline bool gui2backend_msg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool gui2backend_msg::has_type() const {
  return _internal_has_type();
}
inline void gui2backend_msg::clear_type() {
  type_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::type() const {
  // @@protoc_insertion_point(field_get:protocolmsg.gui2backend_msg.type)
  return _internal_type();
}
inline void gui2backend_msg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void gui2backend_msg::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocolmsg.gui2backend_msg.type)
}

// optional string value = 3 [default = ""];
inline bool gui2backend_msg::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool gui2backend_msg::has_value() const {
  return _internal_has_value();
}
inline void gui2backend_msg::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& gui2backend_msg::value() const {
  // @@protoc_insertion_point(field_get:protocolmsg.gui2backend_msg.value)
  return _internal_value();
}
inline void gui2backend_msg::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protocolmsg.gui2backend_msg.value)
}
inline std::string* gui2backend_msg::mutable_value() {
  // @@protoc_insertion_point(field_mutable:protocolmsg.gui2backend_msg.value)
  return _internal_mutable_value();
}
inline const std::string& gui2backend_msg::_internal_value() const {
  return value_.Get();
}
inline void gui2backend_msg::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void gui2backend_msg::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocolmsg.gui2backend_msg.value)
}
inline void gui2backend_msg::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocolmsg.gui2backend_msg.value)
}
inline void gui2backend_msg::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocolmsg.gui2backend_msg.value)
}
inline std::string* gui2backend_msg::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* gui2backend_msg::release_value() {
  // @@protoc_insertion_point(field_release:protocolmsg.gui2backend_msg.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void gui2backend_msg::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocolmsg.gui2backend_msg.value)
}
inline std::string* gui2backend_msg::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocolmsg.gui2backend_msg.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void gui2backend_msg::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocolmsg.gui2backend_msg.value)
}

// optional int32 ack = 4 [default = -1];
inline bool gui2backend_msg::_internal_has_ack() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool gui2backend_msg::has_ack() const {
  return _internal_has_ack();
}
inline void gui2backend_msg::clear_ack() {
  ack_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::ack() const {
  // @@protoc_insertion_point(field_get:protocolmsg.gui2backend_msg.ack)
  return _internal_ack();
}
inline void gui2backend_msg::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ack_ = value;
}
inline void gui2backend_msg::set_ack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:protocolmsg.gui2backend_msg.ack)
}

// optional int32 ispageswitchevent = 5 [default = -1];
inline bool gui2backend_msg::_internal_has_ispageswitchevent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool gui2backend_msg::has_ispageswitchevent() const {
  return _internal_has_ispageswitchevent();
}
inline void gui2backend_msg::clear_ispageswitchevent() {
  ispageswitchevent_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::_internal_ispageswitchevent() const {
  return ispageswitchevent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 gui2backend_msg::ispageswitchevent() const {
  // @@protoc_insertion_point(field_get:protocolmsg.gui2backend_msg.ispageswitchevent)
  return _internal_ispageswitchevent();
}
inline void gui2backend_msg::_internal_set_ispageswitchevent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  ispageswitchevent_ = value;
}
inline void gui2backend_msg::set_ispageswitchevent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ispageswitchevent(value);
  // @@protoc_insertion_point(field_set:protocolmsg.gui2backend_msg.ispageswitchevent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocolmsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PROTOCOL_5fMSG_2eproto
